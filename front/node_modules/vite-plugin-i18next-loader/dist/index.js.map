{"version":3,"sources":["../src/index.ts","../src/utils.ts"],"sourcesContent":["import * as path from 'node:path'\n\nimport { setProperty } from 'dot-prop'\nimport { marked } from 'marked'\nimport TerminalRenderer from 'marked-terminal'\nimport { merge } from 'ts-deepmerge'\nimport { createLogger, LogLevel, Plugin } from 'vite'\n\nimport {\n  assertExistence,\n  enumerateLangs,\n  findAll,\n  jsNormalizedLang,\n  loadAndParse,\n  resolvedVirtualModuleId,\n  resolvePaths,\n  virtualModuleId,\n} from './utils'\n\nmarked.setOptions({\n  // eslint-disable-next-line @typescript-eslint/no-unsafe-call,@typescript-eslint/no-unsafe-assignment\n  renderer: new TerminalRenderer(),\n})\n\n// unfortunately not exported\nexport const LogLevels: Record<LogLevel, number> = {\n  silent: 0,\n  error: 1,\n  warn: 2,\n  info: 3,\n}\n\nexport interface Options {\n  /**\n   * Set to 'info' for noisy information.\n   *\n   * Default: 'warn'\n   */\n  logLevel?: LogLevel\n\n  /**\n   * Glob patterns to match files\n   *\n   * Default: ['**\\/*.json', '**\\/*.yml', '**\\/*.yaml']\n   */\n  include?: string[]\n\n  /**\n   * Locale top level directory paths ordered from least specialized to most specialized\n   *  e.g. lib locale -> app locale\n   *\n   * Locales loaded later will overwrite any duplicated key via a deep merge strategy.\n   */\n  paths: string[]\n\n  /**\n   * Default: none\n   */\n  namespaceResolution?: 'basename' | 'relativePath'\n}\n\nexport interface ResBundle {\n  [key: string]: string | object\n}\n\n// for fast match on hot reloading check?\nlet loadedFiles: string[] = []\nlet allLangs: Set<string> = new Set()\n\nconst factory = (options: Options) => {\n  const log = createLogger(options.logLevel || 'warn', { prefix: '[i18next-loader]' })\n\n  function loadLocales() {\n    const localeDirs = resolvePaths(options.paths, process.cwd())\n    assertExistence(localeDirs)\n\n    //\n    let appResBundle: ResBundle = {}\n    loadedFiles = [] // reset\n    log.info('Bundling locales (ordered least specific to most):', {\n      timestamp: true,\n    })\n    localeDirs.forEach((nextLocaleDir) => {\n      // all subdirectories match language codes\n      const langs = enumerateLangs(nextLocaleDir)\n      allLangs = new Set([...allLangs, ...langs])\n      for (const lang of langs) {\n        const resBundle: ResBundle = {}\n        resBundle[lang] = {}\n\n        const langDir = path.join(nextLocaleDir, lang) // top level lang dir\n        const langFiles = findAll(\n          options.include || ['**/*.json', '**/*.yml', '**/*.yaml'],\n          langDir,\n        ) // all lang files matching patterns in langDir\n\n        for (const langFile of langFiles) {\n          loadedFiles.push(langFile) // track for fast hot reload matching\n          log.info('\\t' + langFile, {\n            timestamp: true,\n          })\n\n          const content = loadAndParse(langFile)\n\n          if (options.namespaceResolution) {\n            let namespaceFilepath: string = langFile\n            if (options.namespaceResolution === 'relativePath') {\n              namespaceFilepath = path.relative(path.join(nextLocaleDir, lang), langFile)\n            } else if (options.namespaceResolution === 'basename') {\n              namespaceFilepath = path.basename(langFile)\n            }\n            const extname = path.extname(langFile)\n            const namespaceParts = namespaceFilepath.replace(extname, '').split(path.sep)\n            const namespace = [lang].concat(namespaceParts).join('.')\n            setProperty(resBundle, namespace, content)\n          } else {\n            resBundle[lang] = content\n          }\n          appResBundle = merge(appResBundle, resBundle)\n        }\n      }\n    })\n\n    // one bundle - works, no issues with dashes in names\n    // const bundle = `export default ${JSON.stringify(appResBundle)}`\n\n    // named exports, requires manipulation of names\n    let namedBundle = ''\n    for (const lang of allLangs) {\n      namedBundle += `export const ${jsNormalizedLang(lang)} = ${JSON.stringify(\n        appResBundle[lang],\n      )}\\n`\n    }\n    let defaultExport = 'const resources = { \\n'\n    for (const lang of allLangs) {\n      defaultExport += `\"${lang}\": ${jsNormalizedLang(lang)},\\n`\n    }\n    defaultExport += '}'\n    defaultExport += '\\nexport default resources\\n'\n\n    const bundle = namedBundle + defaultExport\n\n    log.info(`Locales module '${resolvedVirtualModuleId}':`, {\n      timestamp: true,\n    })\n\n    // emulate log.info for our marked terminal output\n    if (LogLevels[options.logLevel || 'warn'] >= LogLevels['info']) {\n      // eslint-disable-next-line no-console\n      console.log(\n        marked(`\n\\`\\`\\`js\n${bundle}\n\\`\\`\\`\n`),\n      )\n    }\n    return bundle\n  }\n\n  const plugin: Plugin = {\n    name: 'vite-plugin-i18next-loader', // required, will show up in warnings and errors\n    resolveId(id) {\n      if (id === virtualModuleId) {\n        return resolvedVirtualModuleId\n      }\n      return null\n    },\n    load(id) {\n      if (id !== resolvedVirtualModuleId) {\n        return null\n      }\n\n      const bundle = loadLocales()\n      for (const file of loadedFiles) {\n        this.addWatchFile(file)\n      }\n      return bundle\n    },\n\n    /**\n     * Watch translation message files and trigger an update.\n     *\n     * @see https://github.com/vitejs/vite/issues/6871 <- as is implemented now, with a full reload\n     * @see https://github.com/vitejs/vite/pull/10333 <- TODO this is the one that would be easiest and may not be a full reload\n     */\n    handleHotUpdate({ file, server }) {\n      if (loadedFiles.includes(file)) {\n        log.info(`Changed locale file: ${file}`, {\n          timestamp: true,\n        })\n\n        const { moduleGraph, ws } = server\n        const module = moduleGraph.getModuleById(resolvedVirtualModuleId)\n        if (module) {\n          log.info(`Invalidated module '${resolvedVirtualModuleId}' - sending full reload`, {\n            timestamp: true,\n          })\n          moduleGraph.invalidateModule(module)\n          // server.reloadModule(module) // TODO with vite 3.2 see https://github.com/vitejs/vite/pull/10333, may also be able to remove full reload\n          if (ws) {\n            ws.send({\n              type: 'full-reload',\n              path: '*',\n            })\n          }\n        }\n      }\n    },\n  }\n  return plugin\n}\n\nexport default factory\n","import * as fs from 'node:fs'\nimport * as path from 'node:path'\n\nimport globAll from 'glob-all'\nimport * as yaml from 'js-yaml'\n\n// don't export these from index so the external types are cleaner\nexport const virtualModuleId = 'virtual:i18next-loader'\nexport const resolvedVirtualModuleId = '\\0' + virtualModuleId\n\nexport function jsNormalizedLang(lang: string) {\n  return lang.replace(/-/g, '_')\n}\n\nexport function enumerateLangs(dir: string) {\n  return fs.readdirSync(dir).filter(function (file) {\n    return fs.statSync(path.join(dir, file)).isDirectory()\n  })\n}\n\n//https://github.com/jpillora/node-glob-all#usage\nexport function findAll(globs: string | string[], cwd: string): string[] {\n  const globArray = Array.isArray(globs) ? globs : [globs]\n  // eslint-disable-next-line @typescript-eslint/no-unsafe-call,@typescript-eslint/no-unsafe-member-access\n  return globAll.sync(globArray, { cwd, realpath: true }) as string[]\n}\n\nexport function resolvePaths(paths: string[], cwd: string) {\n  return paths.map((override) => {\n    if (path.isAbsolute(override)) {\n      return override\n    } else {\n      return path.join(cwd, override)\n    }\n  })\n}\n\nexport function assertExistence(paths: string[]) {\n  for (const dir of paths) {\n    if (!fs.existsSync(dir)) {\n      throw new Error(`Directory does not exist: ${dir}`)\n    }\n  }\n}\n\nexport function loadAndParse(langFile: string) {\n  const fileContent = String(fs.readFileSync(langFile))\n  const extname = path.extname(langFile)\n  let parsedContent: string\n  if (extname === '.yaml' || extname === '.yml') {\n    parsedContent = yaml.load(fileContent) as string\n  } else {\n    parsedContent = JSON.parse(fileContent) as string\n  }\n  return parsedContent\n}\n"],"mappings":"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","names":["path","setProperty","marked","TerminalRenderer","merge","createLogger","fs","path","globAll","yaml","virtualModuleId","resolvedVirtualModuleId","jsNormalizedLang","lang","enumerateLangs","dir","file","findAll","globs","cwd","globArray","resolvePaths","paths","override","assertExistence","loadAndParse","langFile","fileContent","extname","parsedContent","marked","TerminalRenderer","LogLevels","loadedFiles","allLangs","factory","options","log","createLogger","loadLocales","localeDirs","resolvePaths","assertExistence","appResBundle","nextLocaleDir","langs","enumerateLangs","lang","resBundle","langDir","langFiles","findAll","langFile","content","loadAndParse","namespaceFilepath","extname","namespaceParts","namespace","setProperty","merge","namedBundle","jsNormalizedLang","defaultExport","bundle","resolvedVirtualModuleId","id","virtualModuleId","file","server","moduleGraph","ws","module","src_default"]}