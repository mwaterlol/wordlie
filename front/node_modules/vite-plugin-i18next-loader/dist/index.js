import*as n from"node:path";import{setProperty as z}from"dot-prop";import{marked as M}from"marked";import D from"marked-terminal";import{merge as J}from"ts-deepmerge";import{createLogger as V}from"vite";import*as a from"node:fs";import*as d from"node:path";import k from"glob-all";import*as R from"js-yaml";var L="virtual:i18next-loader",f="\0"+L;function j(e){return e.replace(/-/g,"_")}function S(e){return a.readdirSync(e).filter(function(t){return a.statSync(d.join(e,t)).isDirectory()})}function A(e,t){let r=Array.isArray(e)?e:[e];return k.sync(r,{cwd:t,realpath:!0})}function $(e,t){return e.map(r=>d.isAbsolute(r)?r:d.join(t,r))}function b(e){for(let t of e)if(!a.existsSync(t))throw new Error(`Directory does not exist: ${t}`)}function B(e){let t=String(a.readFileSync(e)),r=d.extname(e),g;return r===".yaml"||r===".yml"?g=R.load(t):g=JSON.parse(t),g}M.setOptions({renderer:new D});var I={silent:0,error:1,warn:2,info:3},x=[],y=new Set,G=e=>{let t=V(e.logLevel||"warn",{prefix:"[i18next-loader]"});function r(){let o=$(e.paths,process.cwd());b(o);let l={};x=[],t.info("Bundling locales (ordered least specific to most):",{timestamp:!0}),o.forEach(s=>{let w=S(s);y=new Set([...y,...w]);for(let m of w){let h={};h[m]={};let E=n.join(s,m),F=A(e.include||["**/*.json","**/*.yml","**/*.yaml"],E);for(let u of F){x.push(u),t.info("	"+u,{timestamp:!0});let P=B(u);if(e.namespaceResolution){let v=u;e.namespaceResolution==="relativePath"?v=n.relative(n.join(s,m),u):e.namespaceResolution==="basename"&&(v=n.basename(u));let O=n.extname(u),N=v.replace(O,"").split(n.sep),C=[m].concat(N).join(".");z(h,C,P)}else h[m]=P;l=J(l,h)}}});let i="";for(let s of y)i+=`export const ${j(s)} = ${JSON.stringify(l[s])}
`;let c=`const resources = { 
`;for(let s of y)c+=`"${s}": ${j(s)},
`;c+="}",c+=`
export default resources
`;let p=i+c;return t.info(`Locales module '${f}':`,{timestamp:!0}),I[e.logLevel||"warn"]>=I.info&&console.log(M(`
\`\`\`js
${p}
\`\`\`
`)),p}return{name:"vite-plugin-i18next-loader",resolveId(o){return o===L?f:null},load(o){if(o!==f)return null;let l=r();for(let i of x)this.addWatchFile(i);return l},handleHotUpdate({file:o,server:l}){if(x.includes(o)){t.info(`Changed locale file: ${o}`,{timestamp:!0});let{moduleGraph:i,ws:c}=l,p=i.getModuleById(f);p&&(t.info(`Invalidated module '${f}' - sending full reload`,{timestamp:!0}),i.invalidateModule(p),c&&c.send({type:"full-reload",path:"*"}))}}}},Z=G;export{I as LogLevels,Z as default};
//# sourceMappingURL=index.js.map